import math
import time

from another_solver import Solver
from sudoku_csp_solver import solve_sudoku

inputs = """
9 7 3 5 8 1 4 2 6
5 2 6 4 7 3 1 9 8
1 8 4 2 9 6 7 5 3
2 4 7 8 6 5 3 1 9
3 9 8 1 2 4 6 7 5
6 5 1 7 3 9 8 4 2
8 1 9 3 4 2 5 6 7
7 6 5 9 1 8 2 3 4
4 3 2 6 5 7 9 8 1

7 2 4 8 6 5 1 9 3
1 6 9 2 4 3 8 7 5
3 8 5 1 9 7 2 4 6
8 9 6 7 2 4 3 5 1
2 7 3 9 5 1 6 8 4
4 5 1 3 8 6 9 2 7
5 4 2 6 3 9 7 1 8
6 1 8 5 7 2 4 3 9
9 3 7 4 1 8 5 6 2

1 5 7 6 8 2 3 4 9
4 3 2 5 1 9 6 8 7
6 9 8 3 4 7 2 5 1
8 2 5 4 7 6 1 9 3
7 1 3 9 2 8 4 6 5
9 6 4 1 3 5 7 2 8
5 4 1 2 9 3 8 7 6
2 8 9 7 6 1 5 3 4
3 7 6 8 5 4 9 1 2

8 3 5 4 1 6 9 2 7
2 9 6 8 5 7 4 3 1
4 1 7 2 9 3 6 5 8
5 6 9 1 3 4 7 8 2
1 2 3 6 7 8 5 4 9
7 4 8 5 2 9 1 6 3
6 5 2 7 8 1 3 9 4
9 8 1 3 4 5 2 7 6
3 7 4 9 6 2 8 1 5

6 2 8 4 5 1 7 9 3
5 9 4 7 3 2 6 8 1
7 1 3 6 8 9 5 4 2
2 4 7 3 1 5 8 6 9
9 6 1 8 2 7 3 5 4
3 8 5 9 6 4 2 1 7
1 5 6 2 4 3 9 7 8
4 3 9 5 7 8 1 2 6
8 7 2 1 9 6 4 3 5

1 2 3 4 5 6 7 8 9
4 5 6 7 8 9 1 2 3
7 8 9 1 2 3 4 5 6
2 1 4 3 6 5 8 9 7
3 6 5 8 9 7 2 1 4
8 9 7 2 1 4 3 6 5
5 3 1 6 4 8 9 7 2
6 4 8 9 7 2 5 3 1
9 7 2 5 3 1 6 4 8

1 4 5 7 9 2 8 3 6
3 7 6 5 8 4 1 9 2
2 9 8 3 6 1 7 5 4
7 3 1 9 2 8 6 4 5
8 5 9 6 4 7 3 2 1
4 6 2 1 3 5 9 8 7
6 2 4 8 7 3 5 1 9
5 8 7 4 1 9 2 6 3
9 1 3 2 5 6 4 7 8

5 2 7 4 1 6 9 3 8
8 6 4 3 2 9 1 5 7
1 3 9 5 7 8 6 4 2
2 9 1 8 5 4 3 7 6
3 4 8 6 9 7 5 2 1
6 7 5 1 3 2 4 8 9
7 1 2 9 4 5 8 6 3
4 8 3 2 6 1 7 9 5
9 5 6 7 8 3 2 1 4

2 4 6 7 1 3 9 8 5
1 8 5 4 9 6 7 3 2
9 3 7 8 2 5 1 4 6
6 7 8 5 4 2 3 9 1
4 9 3 1 6 8 2 5 7
5 1 2 3 7 9 4 6 8
8 2 4 9 5 7 6 1 3
7 5 9 6 3 1 8 2 4
3 6 1 2 8 4 5 7 9

8 6 1 2 9 4 5 7 3
4 7 5 3 1 8 6 9 2
3 9 2 5 6 7 8 1 4
2 3 6 4 5 9 7 8 1
1 5 4 7 8 3 2 6 9
9 8 7 6 2 1 3 4 5
5 2 9 1 7 6 4 3 8
6 4 8 9 3 2 1 5 7
7 1 3 8 4 5 9 2 6
""".strip().split('\n\n')


def factorize(puzzle: str):
    puzzle = puzzle.split()
    target_solution = ''.join(puzzle)
    assert len(target_solution) == 81 and all(char in '123456789' for char in target_solution)
    current_board = ['*'] * 81

    output = [(0, 1)] * 81

    for cell_id in range(81):
        # print(''.join(current_board))

        possible_values = []
        for cell_value in '123456789':
            current_board[cell_id] = cell_value
            # print(' ' * cell_id + cell_value)
            if cell_id < 80:
                try:
                    s = Solver(''.join(current_board))
                    for solution in s.genSolutions():
                        # print(solution.representation())
                        possible_values.append(cell_value)
                        break
                    continue
                except RecursionError:
                    # print('recursion error!')
                    pass
            try:
                # print('retrying...')
                solution = solve_sudoku(''.join(current_board))
                # print(solution)
                possible_values.append(cell_value)
            except AssertionError:
                pass

        current_board[cell_id] = target_solution[cell_id]
        output[cell_id] = (possible_values.index(target_solution[cell_id]), len(possible_values))
    return output


if __name__ == '__main__':

    for puzzle in inputs:
        t = time.time()
        factors = factorize(puzzle)
        print(f'total seconds: {time.time() - t:0.2f}')
        print(f'{factors=}')
        total_entropy = math.prod(d for n, d in factors)
        print(f'{total_entropy=}, {math.log2(total_entropy)}')
        encoded = 0
        for x, y in factors[::-1]:
            encoded *= y
            encoded += x
        print(f'{encoded=}, {math.log2(encoded)}')
        while factors[-1][0] == 0:
            factors.pop(-1)
        print(f'nonzero factors: {len(factors)}')

out = """
total seconds: 109.33
factors=[(8, 9), (6, 8), (2, 7), (3, 6), (4, 5), (0, 4), (1, 3), (0, 2), (0, 1), (3, 6), (1, 5), (2, 4), (1, 4), (1, 3), (0, 2), (0, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (2, 3), (1, 2), (0, 1), (0, 6), (2, 6), (2, 5), (3, 5), (3, 4), (0, 2), (0, 2), (0, 1), (0, 1), (0, 3), (3, 4), (2, 3), (0, 2), (0, 2), (0, 2), (1, 2), (0, 1), (0, 1), (0, 1), (1, 2), (0, 1), (0, 2), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (2, 3), (0, 3), (2, 3), (0, 2), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=19412847183978823680000, 74.0394298138667
encoded=11566346152895452108214, 73.29235127179153
nonzero factors: 64
total seconds: 68.79
factors=[(6, 9), (1, 8), (2, 7), (4, 6), (3, 5), (2, 4), (0, 3), (1, 2), (0, 1), (0, 6), (2, 5), (3, 4), (0, 4), (1, 3), (0, 1), (2, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (0, 3), (0, 2), (0, 1), (4, 6), (5, 6), (3, 5), (3, 4), (1, 4), (1, 2), (0, 2), (0, 1), (0, 1), (0, 3), (4, 5), (1, 2), (2, 3), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 3), (2, 3), (0, 2), (0, 1), (1, 2), (1, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=3235474530663137280000, 71.45446731314556
encoded=2298795383488767348687, 70.96136804965916
nonzero factors: 67
total seconds: 105.49
factors=[(0, 9), (3, 8), (4, 7), (3, 6), (3, 5), (0, 4), (0, 3), (0, 2), (0, 1), (2, 6), (1, 5), (0, 4), (1, 4), (0, 3), (0, 1), (0, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (0, 3), (0, 2), (0, 1), (1, 3), (1, 2), (0, 1), (4, 6), (1, 5), (3, 6), (1, 4), (2, 4), (2, 3), (0, 2), (0, 1), (0, 1), (1, 3), (0, 3), (0, 4), (2, 3), (0, 2), (1, 2), (0, 2), (0, 1), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 2), (0, 1), (0, 1), (2, 3), (0, 3), (0, 3), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 2), (1, 2), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=34943124931161882624000, 74.88742672042166
encoded=26382615337241031547539, 74.48200567512296
nonzero factors: 66
total seconds: 443.13
factors=[(7, 9), (2, 8), (3, 7), (2, 6), (0, 5), (1, 4), (2, 3), (0, 2), (0, 1), (1, 6), (4, 5), (2, 4), (3, 4), (1, 3), (0, 1), (2, 3), (1, 2), (0, 1), (1, 3), (0, 2), (0, 1), (0, 3), (1, 2), (0, 1), (1, 3), (0, 2), (0, 1), (2, 6), (2, 5), (5, 6), (0, 3), (1, 5), (1, 3), (0, 2), (0, 1), (0, 1), (0, 3), (0, 4), (0, 3), (0, 3), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 3), (0, 3), (1, 2), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (1, 2), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=2729931635247022080000, 71.20935481530903
encoded=2237029617652565638129, 70.92207435004086
nonzero factors: 65
total seconds: 214.60
factors=[(5, 9), (1, 8), (5, 7), (2, 6), (2, 5), (0, 4), (1, 3), (1, 2), (0, 1), (3, 6), (4, 5), (2, 4), (3, 5), (1, 4), (0, 3), (1, 3), (1, 2), (0, 1), (2, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (2, 3), (1, 2), (0, 1), (1, 6), (1, 6), (3, 5), (1, 5), (0, 3), (0, 3), (0, 2), (0, 1), (0, 1), (3, 4), (2, 4), (0, 2), (1, 2), (0, 3), (1, 2), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 1), (1, 2), (0, 1), (1, 2), (0, 1), (0, 1), (0, 3), (1, 3), (0, 2), (0, 1), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 2), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=48532117959947059200000, 75.36135790875407
encoded=1276749145299246360710, 70.11296508589449
nonzero factors: 56
total seconds: 122.49
factors=[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (0, 6), (0, 6), (0, 4), (0, 5), (0, 3), (0, 3), (0, 2), (0, 1), (0, 1), (0, 5), (0, 3), (0, 3), (0, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 2), (0, 1), (0, 1), (0, 3), (0, 3), (0, 3), (0, 2), (0, 2), (1, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 2), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=10919726540988088320000, 73.20935481530903
encoded=6142346179305799680000, 72.37927981675134
nonzero factors: 66
total seconds: 109.03
factors=[(0, 9), (2, 8), (2, 7), (3, 6), (4, 5), (0, 4), (2, 3), (0, 2), (0, 1), (1, 6), (2, 5), (1, 4), (2, 4), (2, 3), (1, 2), (0, 3), (1, 2), (0, 1), (0, 3), (1, 2), (0, 1), (1, 3), (1, 2), (0, 1), (2, 3), (1, 2), (0, 1), (3, 6), (2, 6), (0, 4), (4, 5), (0, 3), (2, 3), (1, 2), (0, 1), (0, 1), (3, 5), (1, 3), (2, 3), (1, 2), (0, 1), (1, 2), (1, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 2), (0, 1), (1, 3), (1, 3), (1, 3), (0, 1), (1, 2), (0, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=21839453081976176640000, 74.20935481530903
encoded=12973387108361592340170, 73.45797327694085
nonzero factors: 67
total seconds: 35.61
factors=[(4, 9), (1, 8), (4, 7), (2, 6), (0, 5), (1, 4), (2, 3), (0, 2), (0, 1), (4, 6), (3, 5), (2, 4), (1, 5), (0, 4), (0, 1), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (0, 3), (0, 2), (0, 1), (2, 3), (1, 2), (0, 1), (0, 6), (5, 6), (0, 5), (2, 3), (2, 4), (1, 3), (0, 2), (0, 1), (0, 1), (0, 4), (0, 4), (2, 3), (2, 5), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (1, 3), (0, 3), (0, 3), (0, 1), (0, 1), (1, 2), (0, 1), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 2), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]
total_entropy=12133029489986764800000, 73.36135790875407
encoded=1578187312846737119149, 70.41875843960672
nonzero factors: 60
"""
